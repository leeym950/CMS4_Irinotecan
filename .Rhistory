##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "C:/Users/leeym/Desktop/Personal/BI/Projects/Data/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "rectal_data_summary2_processed.csv"), sep=',', row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.standrdized.txt"))
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR")
extract.from.expression.data <- c()
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- select(raw.expression.data, extract.from.expression.data)
} else {
expression.data <- raw.expression.data
}
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c()
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- select(raw.expression.data, extract.from.expression.data)
} else {
expression.data <- raw.expression.data
}
##
## 1_2. Data property analysis
library(ggplot2)
library(ggpubr)
subset <- expression.data
# x: sample
# y: gene expressions
boxplot(subset)
# x: gene expressions,
# y: sample variation
# Randomly chose several genes from total > 13,000 genes
set.seed(2019)
number_of_samples <- 50
random.choice <- runif(number_of_samples, min=1, max=nrow(subset))
boxplot(t(subset)[ ,random.choice])
subset <- expression.data[ ,"TOP1"]
subset <- expression.data["TOP1",]
subset
subset <- expression.data[c("TOP1","CES2",]
subset <- expression.data[c("TOP1","CES2"),]
subset
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- select(raw.expression.data, extract.from.expression.data)
} else {
expression.data <- raw.expression.data
}
View(expression.data)
if(length(extract.from.expression.data) != 0) {
expression.data <- select(raw.expression.data, extract.from.expression.data)
} else {
expression.data <- raw.expression.data
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
View(expression.data)
View(clinical.data)
gsub
substring(colnames(raw.expression.data),4,4) <- "-" # genes.RPS row.names are in "KR0.0000" but in Dataset, it's "KR0-0000". Thus change .(dot) to "-"
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
subset <- merge(t(expression.data), clinical.data, by=row()
subset <- merge(t(expression.data), clinical.data, by=row())
subset <- merge(t(expression.data), clinical.data, by=row())
subset <- merge(t(expression.data), clinical.data, by=row.names)
subset <- cbind(t(expression.data), clinical.data, by=row.names)
dim(expression.data)
subset <- cbind(t(expression.data), clinical.data)
View(subset)
boxplot(TOP1 ~ CMS-Caller, data=subset)
boxplot(TOP1 ~ CMS_Caller, data=subset)
ggboxplot(TOP1 ~ CMS_Caller, data=subset)
ggboxplot(data=subset, TOP1, CMS_Caller)
ggboxplot(data=subset, "TOP1", CMS_Caller)
ggboxplot(data=subset, subset$TOP1, subset$CMS_Caller)
ggboxplot(subset)
ggboxplot(subset, subset$TOP1)
ggboxplot(data=subset, subset$CMS_Caller, subset$CMS_Caller)
ggboxplot(data=subset, subset$CMS_Caller, subset$TOP1)
ggboxplot(data=subset, subset$CMS_Caller, TOP1)
ggboxplot(data=subset, "CMS_Caller", "TOP1")
ggboxplot(data=subset, "CMS_Caller", "CES1")
ggboxplot(data=subset, "CMS_Caller", "CES2")
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "C:/Users/leeym/Desktop/Personal/BI/Projects/Data/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "rectal_data_summary2_processed.csv"), sep=',', row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.txt"))
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
substring(colnames(raw.expression.data),4,4) <- "-" # genes.RPS row.names are in "KR0.0000" but in Dataset, it's "KR0-0000". Thus change .(dot) to "-"
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
##
## CMS4 vs others : TOP1
##
##
##
library(ggplot2)
library(ggpubr)
subset <- cbind(t(expression.data), clinical.data)
ggboxplot(data=subset, "CMS_Caller", "TOP1")
ggboxplot(data=subset, "CMS_Caller", "CES2")
CMS4 <- subset[ ,"CMS_Caller"=4]
CMS4 <- subset[ ,"CMS_Caller"==4]
subset <- cbind(subset, CMS4)
subset <- cbind(subset, CMS4)
CMS4
View(CMS4)
CMS4 <- subset[ ,"CMS_Caller"] == 4
subset <- cbind(subset, CMS4)
ggboxplot(data=subset, "CMS4", "TOP1")
ggboxplot(data=subset, "CMS4", "CES2")
p <- ggboxplot(data=subset, "CMS_Caller", "TOP1")
p+ stat_compare_means(method=t.test)
p <- ggboxplot(data=subset, "CMS4", "TOP1")
p+ stat_compare_means(method=t.test)
p <- ggboxplot(data=subset, "CMS4", "TOP1", add=jitter)
p <- ggboxplot(data=subset, "CMS4", "TOP1", add="jitter")
p+ stat_compare_means(method=t.test)
p+ stat_compare_means(method="t.test")
p+ stat_compare_means()
p <- ggboxplot(data=subset, "CMS4", "CES2")
p+ stat_compare_means()
p <- ggboxplot(data=subset, "CMS4", "TOP1")
p+ stat_compare_means()
p <- ggboxplot(data=subset, "CMS4", "CES2")
p+ stat_compare_means()
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "C:/Users/leeym/Desktop/Personal/BI/Projects/Data/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "rectal_data_summary2_processed.csv"), sep=',', row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.txt"))
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
substring(colnames(raw.expression.data),4,4) <- "-" # genes.RPS row.names are in "KR0.0000" but in Dataset, it's "KR0-0000". Thus change .(dot) to "-"
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
##
## 1_2. Data property analysis
library(ggplot2)
library(ggpubr)
subset <- raw.expression.data
# x: sample
# y: gene expressions
boxplot(subset)
# x: gene expressions,
# y: sample variation
# Randomly chose several genes from total > 13,000 genes
set.seed(2019)
number_of_samples <- 50
random.choice <- runif(number_of_samples, min=1, max=nrow(subset))
boxplot(t(subset)[ ,random.choice])
subset <- cbind(t(expression.data), clinical.data)
CMS4 <- subset[ ,"CMS_Caller"] == 4
subset <- cbind(subset, CMS4)
ggboxplot(data=subset, "CMS_Caller", "TOP1")
p <- ggboxplot(data=subset, "CMS4", "TOP1")
p+ stat_compare_means()
p <- ggboxplot(data=subset, "CMS4", "CES2")
p+ stat_compare_means()
