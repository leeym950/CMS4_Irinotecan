## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
;
##
## 3. CMS classification by NTP method
##
library(edgeR)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
;
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "/cloud/project/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "TCGA-READ.GDC_phenotype.tsv"), row.names=1)
raw.survival.data <- read.delim(paste0(datadir, "TCGA-READ.survival.tsv"), row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "TCGA-READ.htseq_fpkm-uq.tsv"), row.names=1)
# Convert GeneID from ENSG to Hugo Symbol
row.names(raw.expression.data) <- gsub("\\..*","",row.names(raw.expression.data)) # Renaming... delete substring after "."
raw.expression.data <- replaceGeneId(raw.expression.data, id.in="ensg", id.out="symbol") # replace gene ID from Ensembl ID to HUGO symbol
raw.expression.data <- raw.expression.data[- grep("NA[.]*", row.names(raw.expression.data)),] # remove gene IDs that are not converted.
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c()
extract.from.expression.data <- c("TOP1","CES2")
extract.from.survival.data <- c()
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
if(length(extract.from.survival.data) != 0) {
survival.data <- select(raw.survival.data,  extract.from.survival.data)
} else { # if empty
survival.data <- raw.survival.data # extract all
}
##
## 3. CMS classification by NTP method
##
library(edgeR)
exp.data <- raw.expression.data
template <- templates.CMS
colnames(template) <- c("entrez", "class", "probe")
exp.data <- ematAdjust(exp.data, normMethod = "upperquartile")
result <- ntp(exp.data, template, doPlot=TRUE, nPerm=1000)
View(result)
ntp.result <- ntp(exp.data, template, doPlot=TRUE, nPerm=1000)
subset <- cbind(t(expression.data), ntp.result)
View(subset)
View(subset)
CMS4 <- subset[ ,"prediction"] == "CMS4"
subset <- cbind(subset, CMS4)
ggboxplot(data=subset, "prediction", "TOP1")
library(ggplot2)
library(ggpubr)
ggboxplot(data=subset, "prediction", "TOP1")
ggboxplot(data=subset, "prediction", "CES2")
p <- ggboxplot(data=subset, "CMS4", "TOP1")
p+ stat_compare_means()
p <- ggboxplot(data=subset, "CMS4", "CES2")
p+ stat_compare_means()
ggboxplot(data=subset, "prediction", "TOP1")
ggboxplot(data=subset, "prediction", "TOP1")
##
## 3. CMS classification by NTP method
##
library(edgeR)
exp.data <- raw.expression.data
template <- templates.CMS
colnames(template) <- c("entrez", "class", "probe")
exp.data <- ematAdjust(exp.data, normMethod = "quartile")
ntp.result <- ntp(exp.data, template, doPlot=TRUE, nPerm=1000)
##
## 3. CMS classification by NTP method
##
library(edgeR)
exp.data <- raw.expression.data
template <- templates.CMS
colnames(template) <- c("entrez", "class", "probe")
exp.data <- ematAdjust(exp.data, normMethod = "quantile")
ntp.result <- ntp(exp.data, template, doPlot=TRUE, nPerm=1000)
##
## CMS4 vs others : TOP1, CES2
##
##
##
library(ggplot2)
library(ggpubr)
subset <- cbind(t(expression.data), ntp.result)
CMS4 <- subset[ ,"prediction"] == "CMS4"
subset <- cbind(subset, CMS4)
ggboxplot(data=subset, "prediction", "TOP1")
ggboxplot(data=subset, "prediction", "CES2")
p <- ggboxplot(data=subset, "CMS4", "TOP1")
p+ stat_compare_means()
p <- ggboxplot(data=subset, "CMS4", "CES2")
p+ stat_compare_means()
<<<<<<< HEAD
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "C:/Users/leeym/Desktop/Personal/BI/Projects/Data/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "rectal_data_summary2_processed.csv"), sep=',', row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.txt"))
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
substring(colnames(raw.expression.data),4,4) <- "-" # genes.RPS row.names are in "KR0.0000" but in Dataset, it's "KR0-0000". Thus change .(dot) to "-"
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
##
## 1_2. Data property analysis
library(ggplot2)
library(ggpubr)
subset <- raw.expression.data
# x: sample
# y: gene expressions
boxplot(subset)
# x: gene expressions,
# y: sample variation
# Randomly chose several genes from total > 13,000 genes
set.seed(2019)
number_of_samples <- 50
random.choice <- runif(number_of_samples, min=1, max=nrow(subset))
boxplot(t(subset)[ ,random.choice])
subset <- cbind(t(expression.data), clinical.data)
CMS4 <- subset[ ,"CMS_Caller"] == 4
subset <- cbind(subset, CMS4)
ggboxplot(data=subset, "CMS_Caller", "TOP1")
p <- ggboxplot(data=subset, "CMS4", "TOP1")
p+ stat_compare_means()
p <- ggboxplot(data=subset, "CMS4", "CES2")
p+ stat_compare_means()
=======
p+ stat_compare_means() + stat_mean()
;
<<<<<<< HEAD
cat /sys/fs/cgroup/memory/memory.limit_in_byte
cat(readLines("/proc/meminfo"), sep = "\n")
cat(/sys/fs/cgroup/memory/memory.limit_in_bytes)
cat(sys/fs/cgroup/memory/memory.limit_in_bytes)
cat /sys/fs/cgroup/memory/memory.limit_in_bytes
/sys/fs/cgroup/memory/memory.limit_in_bytes
sys/fs/cgroup/memory/memory.limit_in_bytes
memory.limit(4000000)
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "C:/Users/leeym/Desktop/Personal/BI/Projects/Data/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "rectal_data_summary2_processed.csv"), sep=',', row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.txt"))
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
substring(colnames(raw.expression.data),4,4) <- "-" # genes.RPS row.names are in "KR0.0000" but in Dataset, it's "KR0-0000". Thus change .(dot) to "-"
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "/cloud/project/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "rectal_data_summary2_processed.csv"), sep=',', row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.txt"))
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
substring(colnames(raw.expression.data),4,4) <- "-" # genes.RPS row.names are in "KR0.0000" but in Dataset, it's "KR0-0000". Thus change .(dot) to "-"
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "/cloud/project/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "rectal_data_summary2_processed.csv"), sep=',', row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.txt"))
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
substring(colnames(raw.expression.data),4,4) <- "-" # genes.RPS row.names are in "KR0.0000" but in Dataset, it's "KR0-0000". Thus change .(dot) to "-"
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.txt"))
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "C:/Users/leeym/Desktop/Personal/BI/Projects/Data/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "rectal_data_summary2_processed.csv"), sep=',', row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "cc.gene_count.set.vst.float.txt"))
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
substring(colnames(raw.expression.data),4,4) <- "-" # genes.RPS row.names are in "KR0.0000" but in Dataset, it's "KR0-0000". Thus change .(dot) to "-"
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c("survival.time", "survival", "DFS.time", "recurrence", "pCR", "CMS_Caller")
extract.from.expression.data <- c("TOP1","CES2")
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "/cloud/project/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "TCGA-READ.GDC_phenotype.tsv"), row.names=1)
raw.survival.data <- read.delim(paste0(datadir, "TCGA-READ.survival.tsv"), row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "TCGA-READ.htseq_fpkm-uq.tsv"), row.names=1)
# Convert GeneID from ENSG to Hugo Symbol
row.names(raw.expression.data) <- gsub("\\..*","",row.names(raw.expression.data)) # Renaming... delete substring after "."
raw.expression.data <- replaceGeneId(raw.expression.data, id.in="ensg", id.out="symbol") # replace gene ID from Ensembl ID to HUGO symbol
raw.expression.data <- raw.expression.data[- grep("NA[.]*", row.names(raw.expression.data)),] # remove gene IDs that are not converted.
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c()
extract.from.expression.data <- c("TOP1","CES2")
extract.from.survival.data <- c()
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
if(length(extract.from.survival.data) != 0) {
survival.data <- select(raw.survival.data,  extract.from.survival.data)
} else { # if empty
survival.data <- raw.survival.data # extract all
}
##
## 2. Data property analysis
library(ggplot2)
library(ggpubr)
subset <- raw.expression.data
# x: sample
# y: gene expressions
boxplot(subset)
;
# Convert GeneID from ENSG to Hugo Symbol
row.names(raw.expression.data) <- gsub("\\..*","",row.names(raw.expression.data)) # Renaming... delete substring after "."
raw.expression.data <- replaceGeneId(raw.expression.data, id.in="ensg", id.out="symbol") # replace gene ID from Ensembl ID to HUGO symbol
raw.expression.data <- raw.expression.data[- grep("NA[.]*", row.names(raw.expression.data)),] # remove gene IDs that are not converted.
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c()
extract.from.expression.data <- c("TOP1","CES2")
extract.from.survival.data <- c()
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
if(length(extract.from.survival.data) != 0) {
survival.data <- select(raw.survival.data,  extract.from.survival.data)
} else { # if empty
survival.data <- raw.survival.data # extract all
}
##
## 1. Importing data & Pre-processing ####################################################################
##
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
library(BiocGenerics)
library(CMScaller)
datadir <- "/cloud/project/"
## Read data from file | "datadir" must be set | Do only once
raw.clinical.data <- read.delim(paste0(datadir, "TCGA-READ.GDC_phenotype.tsv"), row.names=1)
raw.survival.data <- read.delim(paste0(datadir, "TCGA-READ.survival.tsv"), row.names=1)
raw.expression.data <- read.delim(paste0(datadir, "TCGA-READ.htseq_fpkm-uq.tsv"), row.names=1)
# Convert GeneID from ENSG to Hugo Symbol
row.names(raw.expression.data) <- gsub("\\..*","",row.names(raw.expression.data)) # Renaming... delete substring after "."
raw.expression.data <- replaceGeneId(raw.expression.data, id.in="ensg", id.out="symbol") # replace gene ID from Ensembl ID to HUGO symbol
raw.expression.data <- raw.expression.data[- grep("NA[.]*", row.names(raw.expression.data)),] # remove gene IDs that are not converted.
# if only one gene expression is 0, remove the entire row.
raw.expression.data[raw.expression.data == 0] <- NA
raw.expression.data <- raw.expression.data[complete.cases(raw.expression.data), ]
## Type column names you want to extract
## If not set, all data will be extracted
extract.from.clinical.data <- c()
extract.from.expression.data <- c("TOP1","CES2")
extract.from.survival.data <- c()
## Extracting data
## If extracting vector is empty, then get the full data
if(length(extract.from.clinical.data) != 0) { # if not empty,
clinical.data <- select(raw.clinical.data, extract.from.clinical.data) # extract specific data
} else { # if empty
clinical.data <- raw.clinical.data # extract all
}
if(length(extract.from.expression.data) != 0) {
expression.data <- raw.expression.data[extract.from.expression.data, ]
} else {
expression.data <- raw.expression.data
}
if(length(extract.from.survival.data) != 0) {
survival.data <- select(raw.survival.data,  extract.from.survival.data)
} else { # if empty
survival.data <- raw.survival.data # extract all
}
##
## 3. CMS classification by NTP method
##
library(edgeR)
exp.data <- raw.expression.data
template <- templates.CMS
colnames(template) <- c("entrez", "class", "probe")
exp.data <- ematAdjust(exp.data, normMethod = "quantile")
ntp.result <- ntp(exp.data, template, doPlot=TRUE, nPerm=1000)
##
## 4. CMS4 vs others : TOP1, CES2
##
##
##
library(ggplot2)
library(ggpubr)
subset <- cbind(t(expression.data), ntp.result)
CMS4 <- subset[ ,"prediction"] == "CMS4"
subset <- cbind(subset, CMS4)
ggboxplot(data=subset, "prediction", "TOP1")
##
## 4. CMS4 vs others : TOP1, CES2
##
##
##
library(ggplot2)
library(ggpubr)
subset <- cbind(t(expression.data), ntp.result)
CMS4 <- subset[ ,"prediction"] == "CMS4"
subset <- cbind(subset, CMS4)
ggboxplot(data=subset, "prediction", "TOP1")
ggboxplot(data=subset, "prediction", "CES2")
View(subset)
FDR.filtered.subset <- subset["FDR"<0.2, ]
View(FDR.filtered.subset)
FDR.filtered.subset <- subset[FDR<0.2, ]
FDR.filtered.subset <- subset["FDR"<0.2, ]
FDR.filtered.subset <- subset[ ,"FDR"<0.2]
View(FDR.filtered.subset)
subset[ ,"FDR"]
subset["FDR<0.2"]
subset["FDR<0.2", ]
subset["FDR"<0.2, ]
subset["FDR"<0.2,1]
subset["FDR"<0.2,]
subset["FDR"=<0.2,]
FDR.filtered.subset <- subset[subset[ ,"FDR"]=<0.2, ]
FDR.filtered.subset <- subset[subset[ ,"FDR"]<=0.2, ]
View(FDR.filtered.subset)
# Set FDR threshold:
FDR.filter <- 0.2
FDR.filtered.subset <- subset[subset[ ,"FDR"]<=0.2, ]
CMS4.filtered <- FDR.filtered.subset[ ,"prediction"] == "CMS4"
FDR.filtered.subset <- cbind(FDR.filtered.subset, CMS4.filtered)
ggboxplot(data=FDR.filtered.subset, "prediction", "TOP1")
ggboxplot(data=FDR.filtered.subset, "prediction", "CES2")
p <- ggboxplot(data=FDR.filtered.subset, "CMS4.filtered", "TOP1")
p+ stat_compare_means() + stat_mean()
p <- ggboxplot(data=FDR.filtered.subset, "CMS4.filtered", "CES2")
p+ stat_compare_means()
p <- ggboxplot(data=FDR.filtered.subset, "CMS4.filtered", "TOP1")
p+ stat_compare_means() + stat_mean()
p+ stat_compare_means()
# Set FDR threshold:
FDR.filter <- 0.2
FDR.filtered.subset <- subset[subset[ ,"FDR"]<=0.2, ]
CMS4.filtered <- FDR.filtered.subset[ ,"prediction"] == "CMS4"
FDR.filtered.subset <- cbind(FDR.filtered.subset, CMS4.filtered)
ggboxplot(data=FDR.filtered.subset, "prediction", "TOP1")
ggboxplot(data=FDR.filtered.subset, "prediction", "CES2")
p <- ggboxplot(data=FDR.filtered.subset, "CMS4.filtered", "TOP1")
p+ stat_compare_means()
p <- ggboxplot(data=FDR.filtered.subset, "CMS4.filtered", "CES2")
p+ stat_compare_means()
=======
>>>>>>> master
>>>>>>> e936014fbdf9a0980a950f11618e7541f91d8181
